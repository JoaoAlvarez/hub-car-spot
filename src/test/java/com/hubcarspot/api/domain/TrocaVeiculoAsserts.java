package com.hubcarspot.api.domain;

import static com.hubcarspot.api.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrocaVeiculoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrocaVeiculoAllPropertiesEquals(TrocaVeiculo expected, TrocaVeiculo actual) {
        assertTrocaVeiculoAutoGeneratedPropertiesEquals(expected, actual);
        assertTrocaVeiculoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrocaVeiculoAllUpdatablePropertiesEquals(TrocaVeiculo expected, TrocaVeiculo actual) {
        assertTrocaVeiculoUpdatableFieldsEquals(expected, actual);
        assertTrocaVeiculoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrocaVeiculoAutoGeneratedPropertiesEquals(TrocaVeiculo expected, TrocaVeiculo actual) {
        assertThat(expected)
            .as("Verify TrocaVeiculo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrocaVeiculoUpdatableFieldsEquals(TrocaVeiculo expected, TrocaVeiculo actual) {
        assertThat(expected)
            .as("Verify TrocaVeiculo relevant properties")
            .satisfies(e -> assertThat(e.getCarroEntradaId()).as("check carroEntradaId").isEqualTo(actual.getCarroEntradaId()))
            .satisfies(e -> assertThat(e.getCarroSaidaId()).as("check carroSaidaId").isEqualTo(actual.getCarroSaidaId()))
            .satisfies(e -> assertThat(e.getDataTroca()).as("check dataTroca").isEqualTo(actual.getDataTroca()))
            .satisfies(e -> assertThat(e.getCondicaoPagamento()).as("check condicaoPagamento").isEqualTo(actual.getCondicaoPagamento()))
            .satisfies(e ->
                assertThat(e.getValorPago()).as("check valorPago").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getValorPago())
            )
            .satisfies(e ->
                assertThat(e.getValorRecebido())
                    .as("check valorRecebido")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getValorRecebido())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrocaVeiculoUpdatableRelationshipsEquals(TrocaVeiculo expected, TrocaVeiculo actual) {
        assertThat(expected)
            .as("Verify TrocaVeiculo relationships")
            .satisfies(e -> assertThat(e.getVeiculoEntrada()).as("check veiculoEntrada").isEqualTo(actual.getVeiculoEntrada()))
            .satisfies(e -> assertThat(e.getVeiculoSaida()).as("check veiculoSaida").isEqualTo(actual.getVeiculoSaida()))
            .satisfies(e -> assertThat(e.getFilial()).as("check filial").isEqualTo(actual.getFilial()))
            .satisfies(e -> assertThat(e.getInstituicao()).as("check instituicao").isEqualTo(actual.getInstituicao()));
    }
}
