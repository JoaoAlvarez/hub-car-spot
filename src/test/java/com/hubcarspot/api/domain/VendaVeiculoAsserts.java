package com.hubcarspot.api.domain;

import static com.hubcarspot.api.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VendaVeiculoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaVeiculoAllPropertiesEquals(VendaVeiculo expected, VendaVeiculo actual) {
        assertVendaVeiculoAutoGeneratedPropertiesEquals(expected, actual);
        assertVendaVeiculoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaVeiculoAllUpdatablePropertiesEquals(VendaVeiculo expected, VendaVeiculo actual) {
        assertVendaVeiculoUpdatableFieldsEquals(expected, actual);
        assertVendaVeiculoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaVeiculoAutoGeneratedPropertiesEquals(VendaVeiculo expected, VendaVeiculo actual) {
        assertThat(expected)
            .as("Verify VendaVeiculo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaVeiculoUpdatableFieldsEquals(VendaVeiculo expected, VendaVeiculo actual) {
        assertThat(expected)
            .as("Verify VendaVeiculo relevant properties")
            .satisfies(e -> assertThat(e.getKmSaida()).as("check kmSaida").isEqualTo(actual.getKmSaida()))
            .satisfies(e ->
                assertThat(e.getValorCompra())
                    .as("check valorCompra")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getValorCompra())
            )
            .satisfies(e ->
                assertThat(e.getValorTabela())
                    .as("check valorTabela")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getValorTabela())
            )
            .satisfies(e ->
                assertThat(e.getValorVenda()).as("check valorVenda").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getValorVenda())
            )
            .satisfies(e -> assertThat(e.getDataVenda()).as("check dataVenda").isEqualTo(actual.getDataVenda()))
            .satisfies(e ->
                assertThat(e.getCondicaoRecebimento()).as("check condicaoRecebimento").isEqualTo(actual.getCondicaoRecebimento())
            )
            .satisfies(e ->
                assertThat(e.getValorEntrada())
                    .as("check valorEntrada")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getValorEntrada())
            )
            .satisfies(e ->
                assertThat(e.getValorFinanciado())
                    .as("check valorFinanciado")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getValorFinanciado())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVendaVeiculoUpdatableRelationshipsEquals(VendaVeiculo expected, VendaVeiculo actual) {
        assertThat(expected)
            .as("Verify VendaVeiculo relationships")
            .satisfies(e -> assertThat(e.getVeiculo()).as("check veiculo").isEqualTo(actual.getVeiculo()))
            .satisfies(e -> assertThat(e.getInstituicao()).as("check instituicao").isEqualTo(actual.getInstituicao()))
            .satisfies(e -> assertThat(e.getFilial()).as("check filial").isEqualTo(actual.getFilial()))
            .satisfies(e -> assertThat(e.getFinanceira()).as("check financeira").isEqualTo(actual.getFinanceira()));
    }
}
